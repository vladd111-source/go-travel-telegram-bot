require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');

// Supabase init
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// Telegram init
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token);

// üîê –ê–¥–º–∏–Ω ID
const ADMIN_ID = 5625134095;

// üîò /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
bot.onText(/\/start/, async (msg) => {
  const { id, username, first_name } = msg.from;

  const { error } = await supabase.from('bot_users').insert({
    telegram_id: id,
    username,
    first_name
  });

  if (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Supabase:", error);
  } else {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${id} (${username || '–±–µ–∑ username'})`);
  }

  bot.sendMessage(msg.chat.id, '–û—Ç–∫—Ä—ã—Ç—å Go Travel WebApp üåç', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å',
          web_app: { url: 'https://go-travel-frontend.vercel.app' }
        }
      ]]
    }
  });
});

// üíå /sendall ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
bot.onText(/^\/sendall (.+)/, async (msg, match) => {
  if (msg.from.id !== ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.");
  }

  const messageToSend = match[1];
  console.log("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. –¢–µ–∫—Å—Ç:", messageToSend);

  try {
    const { data, error } = await supabase.from('bot_users').select('telegram_id');

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      return bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å RLS –∏ —Ç–∞–±–ª–∏—Ü—É bot_users.");
    }

    if (!data || data.length === 0) {
      console.warn("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
      return bot.sendMessage(msg.chat.id, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
    }

    const ids = [...new Set(data.map(row => row.telegram_id))];
    let success = 0;

    for (const id of ids) {
      try {
        await bot.sendMessage(id, messageToSend);
        success++;
        await new Promise(res => setTimeout(res, 200));
      } catch (err) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${id}:`, err.message);
      }
    }

    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success}`);
    bot.sendMessage(msg.chat.id, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success}`);
  } catch (e) {
    console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", e);
    bot.sendMessage(msg.chat.id, "üö´ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }
});

// ‚ùì /help ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
bot.onText(/\/help/, async (msg) => {
  const helpText = `‚ùì <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Go Travel</b>:

<b>‚Äî –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å?
‚Ä¢ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ª—ë—Ç?

üì¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`;

  bot.sendMessage(msg.chat.id, helpText, { parse_mode: "HTML" });
});

// üì¨ /contact ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
bot.onText(/\/contact/, async (msg) => {
  const reply = `üì® –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é –º–µ–Ω–µ–¥–∂–µ—Ä—É: <a href="https://t.me/Parshin_Alex">Parshin_Alex</a>`;
  bot.sendMessage(msg.chat.id, reply, { parse_mode: "HTML", disable_web_page_preview: true });
});

console.log("üöÄ Go Travel Bot –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç /start –∏ /sendall...");
